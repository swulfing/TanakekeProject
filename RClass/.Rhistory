x*y
x <- 4
x*y
y <- 17
x*y
z <- x * y
z
#Concatinate Strings
Country <- "USA"
Age <- 27
paste(name1, "I am from ", "I am", Age, "Years Old") #Need commas between
#Variables are case-sensitve
name1 <- "Sophie"
paste(name1, "I am from ", "I am", Age, "Years Old") #Need commas between
#Concatinate Strings
Country <- "USA"
Age <- 27
paste("My name is ", name1, ". I am from ", Country, "I am", Age, "Years Old") #Need commas between
paste("My name is", name1, "I am from", Country, "I am", Age, "Years Old") #Need commas between
k <- "17"
x * k
k <- "17"
x * k
k <- as.numeric(k)
x * k
#BOOLEAN: TRUE OR FALSE
x < k
x == k
# Characters and strings
nchar(name1)
grepl("Soph", name1)
grepl("Anne", name1)
fruit <- c("apple", "banana", "watermelon", "snake fruit", "mango")
OneToTen <- 1:10
class(fruit)
class(OneToTen)
OneToTen <- c(1:10)
class(OneToTen)
OneToTen
EvenNumbers <- seq(1, 20, 2)
EvenNumbers
EvenNumbers <- seq(0, 20, 2)
EvenNumbers
rep(1, 10)
min(OneToTen)
max(evenNumbers)
evenNumbers <- seq(0, 20, 2)
max(evenNumbers)
numbersList <- c(4, 546, 234, 85, 1, 8, 3543, 654, 14, 46, 8934)
min(numbersList)
max(numbersList)
length(numbersList)
fruit[1]
fruit[1:3]
fruit[c(1,3)]
fruit[-1]
fruit[1] <- "jeruk"
fruit
#boolean operator
"apple" %in% fruit
#Append
fruit <- append("apple", after = 2)
?append
#Append
fruit <- append(fruit, "apple", after = 2)
fruit
OneToTen <- 1:10
OneToTen
evenNumbers <- seq(0, 20, 2)
EvenNumbers
evenNumbers <- seq(0, 20, 3)
EvenNumbers
evenNumbers
evenNumbers <- seq(0, 20, 2)
evenNumbers
tenOnes <- rep(1, 10)
tenOnes
tenOnes <- rep(2, 10)
tenOnes <- rep(2, 10)
tenOnes
tenOnes <- rep(3, 5)
tenOnes
# INDEXING LISTS
min(numbersList)
max(numbersList)
sort(numbersList)
length(numbersList)
range(numbersList)
fruit[1]
fruit <- c("apple", "banana", "watermelon", "snake fruit", "mango")
fruit[1]
fruit[1:3]
fruit[c(1,3)]
fruit[c(1,3, 5)]
fruit[-1]
fruit[-2]
fruit
fruit[1] <- "jeruk"
fruit
#boolean operator
"apple" %in% fruit
#Append
fruit_2 <- append(fruit, "apple", after = 2)
fruit_2
# Create a matrix
numbersMatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
nambersMatrix
numbersMatrix
# Create a matrix
numbersMatrix <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
numbersMatrix
# Can be done with strings as well
fruitMatrix <- matrix(c("apple", "banana", "cherry", "mango","grape", "pineapple", "pear", "melon", "fig"), nrow = 3, ncol = 3)
fruitMatrix
# Indexing
fruitMatrix[1, 2]
fruitMatrix[2,]
fruitMatrix[,2]
#More than one row or column
fruitMatrix[c(1,2),]
#More than one row or column
fruitMatrix[c(1,2),]
fruitMatrix[,c(1,2)]
# ADDING COLUMNS
newFruitMatrix_1 <- cbind(fruitMatrix, c("strawberry", "blueberry", "raspberry"))
# Print the new matrix
newFruitMatrix_1
#ADDING ROWS
newFruitMatrix_2 <- rbind(fruitMatrix, c("strawberry", "blueberry", "raspberry"))
# Print the new matrix
newFruitMatrix_2
# REMOVING ROWS AND COLUMNS
fruitMatrix <- fruitMatrix[-c(1), -c(1)]
fruitMatrix
# check if in matrix
"apple" %in% fruitMatrix
fruitMatrix
"grape" %in% fruitMatrix
# Check Sizes
dim(fruitMatrix)
length(fruitMatrix)
# Create a data frame
Data_Frame <- data.frame (
Student = c("Rina", "Virginia", "Ben"),
Score = c(100, 150, 120),
Time = c(60, 30, 45)
)
# Print the data frame
Data_Frame
# Print the data frame
Data_Frame
# Print the data frame
print(Data_Frame)
# Create a data frame
Data_Frame <- data.frame (
Student = c("Rina", "Virginia", "Ben"),
Score = c(100, 150, 120),
Time = c(60, 30, 45)
)
# Print the data frame
Data_Frame
# Print the data frame
View(Data_Frame)
summary(Data_Frame)
#Accessing
Data_Frame[1]
Data_Frame[["Student"]]
#Accessing
View(Data_Frame[1])
Data_Frame[["Student"]]
Data_Frame$Student
# Add a new row
New_row_DF <- rbind(Data_Frame, c("John", 110, 110))
# Print the new row
New_row_DF
# Print the new row
View(New_row_DF)
# Add a new column
New_col_DF <- cbind(Data_Frame, Place = c(2, 1, 3))
# Print the new column
New_col_DF
# Print the new column
View(New_col_DF)
# Remove the first row and column
Data_Frame_Remove <- Data_Frame[-c(1), -c(1)]
# Print the new data frame
View(Data_Frame_Remove)
# Dimensions
dim(Data_Frame)
ncol(Data_Frame)
nrow(Data_Frame)
length(Data_Frame) #same as ncol
if (b > a) { #Boolean statement. If true, will execute what's in the curly brackets
print("b is greater than a")
}
#if statement
a <- 33
b <- 200
if (b > a) { #Boolean statement. If true, will execute what's in the curly brackets
print("b is greater than a")
}
if (b < a) { #Boolean statement. If true, will execute what's in the curly brackets
print("b is greater than a")
}
a <- 33
b <- 33
if (b > a) {
print("b is greater than a")
} else if (a == b) {
print ("a and b are equal")
}
a <- 200
b <- 33
if (b > a) {
print("b is greater than a")
} else if (a == b) {
print("a and b are equal")
} else {
print("a is greater than b")
}
if (a < 100 & b < 100) {
print("both a and b are below 100")
}
if (a < 100 | b < 100) {
print("either a or b are below 100")
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
}
i <- 1
while (i <= 6) {
print(i)
i <- i + 1
}
i
## Nama variabel yang tidak berjalan
# 1nama <- "Sophie"
# .1nama <- "Sophie"
# _1nama <- "Sophie"
# nama 1 <- "Sophie"
#Huruf besar atau huruf kecil
nama1 <- "Sophie"
NAMA1
#Bersatu rangkian
Negara <- "Indonesia"
Umur <- 27
paste("Halo, nama saya", nama1, "Saya dari", Dari, "Umur saya", Umur, "tahun") # Harus pakai koma di antara kata dan variabel
paste("Halo, nama saya", nama1, "Saya dari", Negara, "Umur saya", Umur, "tahun") # Harus pakai koma di antara kata dan variabel
Daftar_1 <- c(4, 546, 234, 85, 1, 8, 3543, 654, 14, 46, 8934)
range(Daftar_1) #
