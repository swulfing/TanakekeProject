buah_2 <- append(buah, "apel", after = 2)
buah_2
?dplyr
?head
2 + 3
2 + 3
#Perhitungan dasar dapat diselesaikan
2 + 3
#Pembagian
94729 / 7
# Pembagian utuh- desimal tidak dipakai
94729 %/% 7
# Aritmatika modular - keluaran adaleh sisanya
94729 %% 7
#Huruf besar atau huruf kecil
nama1 <- "Sophie"
#Huruf besar atau huruf kecil
nama_1 <- "Sophie"
NAMA1
# Bisa membuat variabel dara nomor dan membuat kalkulasi
x <- 4
y <- 17
x*y
# Membuat variabel dari hasil kalkulasi
z <- x * y
z
#Bersatu Rangkaian
Negara <- "USA"
Umur <- 27
paste("Halo, nama saya", nama1, "Saya dari", Negara, "Umur saya", Umur, "tahun") # Harus pakai koma di antara kata dan variabel
#Bersatu Rangkaian
Negara <- "Amerika"
Umur <- 27
paste("Halo, nama saya", nama1, "Saya dari", Negara, "Umur saya", Umur, "tahun") # Harus pakai koma di antara kata dan variabel
# Angka - tidak pakai tanda kutip
k <- "17"
x * k
# Cek jenis data dengan "class"
class(k)
# Mengubah jenis data
k <- as.numeric(k)
class(k)
x * k #Berjalan
# BOLEAN: TRUE OR FALSE (Betul atau Salah). Di worksheet
x < k
x == k #harus pakai dua tkamu sama dengan
#Menghitung
nchar(nama1)
# Cek kalau ada kata di dalam rangkaian
grepl("Soph", nama1)
grepl("Anne", nama1)
buah <- c("apel", "pisang", "sangka", "salak", "mangga")
Daftar_1 <- c(4, 546, 234, 85, 1, 8, 3543, 654, 14, 46, 8934)
OneToTen <- 1:10 # Membuat daftar kalipatan dengan tkamu titik dua
OneToTen
evenNumbers <- seq(0, 20, 2) #kalau tidak mau setiap angka, bisa membuat urutan dengan "seq"
evenNumbers
?seq
#Even number = angka genap
#Odd NUMBER = angka ganjil
tenOnes <- rep(1, 10) #Membuat dafter dengan angka yang sama berkali-kali
tenOnes
# Dafter Isi
min(Daftar_1) #Minimum
max(Daftar_1) #Maksimum
sort(Daftar_1) #Mengatur
length(Daftar_1) #Jumlah
range(Daftar_1) #Minimum dan Maksimum
#Memanggil sebagian data dari daftar
buah[1]
buah[1:3]
buah[c(1,3, 5)]
buah[-2]
#Mengubah bagian daftar
buah[1] <- "jeruk"
buah
#operator boolean - cek daftar
"apel" %in% buah
#Menambah input baru pada daftar
buah_2 <- append(buah, "apel", after = 2)
buah_2
matriksAngka <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
# Cetak matriks
matriksAngka
# Bisa dibuat dengan rangkaian
matriksBuah <- matrix(c("apel", "pisang", "semangka", "mangga","anggur", "nanas", "salak", "alpukat", "jeruk"), nrow = 3, ncol = 3)
matriksBuah
# Daftar Isi
matriksBuah[1, 2]
matriksBuah[2,]
matriksBuah[,2]
# > 1 Kolom
matriksBuah[c(1,2),]
matriksBuah[,c(1,2)]
# Menambah Kolom
matriksBuahBaru_1 <- cbind(matriksBuah, c("stroberi", "bluberi", "durian"))
# Cetak matriks baru
matriksBuahBaru_1
#Menambah Baris
matriksBuahBaru_2 <- rbind(matriksBuah, c("stroberi", "bluberi", "durian"))
# Cetak matriks baru
matriksBuahBaru_2
# Menghapus baris dan kolom
matriksBuah <- matriksBuah[-c(1), -c(1)]
matriksBuah
# Cek matriks
"apel" %in% matriksBuah
"grape" %in% matriksBuah
# Cek dimensi dan ukuran
dim(matriksBuah)
length(matriksBuah)
View(matriksBuah)
View(matriksAngka)
View(matriksBuahBaru_2)
# Membuat dataframe
Data_Frame <- data.frame (
Murid = c("Rina", "Virginia", "Ben"),
Nilai = c(100, 150, 120),
Waktu = c(60, 30, 45)
)
# Cetak Data frame
View(Data_Frame)
#Menanggil kolom
View(Data_Frame[1])
Data_Frame[["Murid"]]
#if statement
a <- 33
b <- 200
b > a
if (b > a) { #Kalimat boolean. Kalau benar, R akan menjalankan kode di dalam kurung keriting
print("b lebih besar daripada a")
}
a <- 33
b <- 33
if (b > a) {
print("b lebih besar daripada a")
}
if (b > a) {
print("b lebih besar daripada a")
} else if (a == b) {
print ("a sama dengan b")
}
a <- 200
b <- 33
if (b > a) {
print("b lebih besar daripada a")
} else if (a == b) {
print ("a sama dengan b")
} else {
print("a lebih besar daripada b")
}
a <- 200
b <- 33
if (b > a) {
print("b lebih besar daripada a")
} else if (a == b) {
print ("a sama dengan b")
} else {
print("a lebih besar daripada b")
}
a <- 200
b <- 33
if (a < 100 & b < 100) {
print("a dan b kurang dari 100")
}
if (a < 100 | b < 100) {
print("a atau b kurang dari 100")
}
i <- 1 # memberi angka pada i
while (i <= 6) { # Boolean, cek kalimat (benar/salah)
print(i) # Menjalan kode
i <- i + 1 # Merubah i. Kode berulang
}
1:10
for (x in 1:10) {
print(paste("Nomornya ", x))
}
loopBuah <- list("apel", "pisang", "alpukat")
for (x in loopBuah) {
print(paste("Buahnya ", x))
}
fungsi_aku <- function() { # membuat fungsi dengan nama "fungsi_aku". Tidak dijalankan
print("Hello World!")
}
# menanggil fungsi
fungsi_aku()
print("Hello, world")
#Perhitungan dasar dapat diselesaikan
2 + 3
#Pembagian
94729 / 7
# Pembagian utuh- desimal tidak dipakai
94729 %/% 7
# Aritmatika modular - keluaran adaleh sisanya
94729 %% 7
print("Hello, world")
#Perhitungan dasar dapat diselesaikan
2 + 3
#Pembagian
94729 / 7
# Pembagian utuh- desimal tidak dipakai
94729 %/% 7
# Aritmatika modular - keluaran adaleh sisanya
94729 %% 7
# BISA membuat komentar - kata - kata tidak dijalankan - dengan tanda tagar/hashtag
# SELALU DIBERI LABEL PADA KODE. MEMBERI CATATAN - TAKE NOTES
#FUNGSI CETAK
print("Hello, world")
#TO DO: MAKE CHEAT SHEET W OPERATORS
#Pembagian
94729 / 7
print("Hello, world")
#Perhitungan dasar dapat diselesaikan
2 + 3
#Pembagian
94729 / 7
# Pembagian utuh- desimal tidak dipakai
94729 %/% 7
# Aritmatika modular - keluaran adaleh sisanya
94729 %% 7
# BISA membuat komentar - kata - kata tidak dijalankan - dengan tanda tagar/hashtag
# SELALU DIBERI LABEL PADA KODE. MEMBERI CATATAN - TAKE NOTES
#FUNGSI CETAK
print("Hello, world")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
library(ggplot2)
setwd("C:/Users/Sophi/Documents/GitHub/TanakekeProject/URUVS/Datasheets")
# From here: https://rpubs.com/cgb-grupstra/moorea-hobo-20190314
# STILL NEED TO FILTURE OUT THE TIME BEFORE INSTALLATION
# #Later make a loop that goes through each month and combines each month of the same logger.
# #I THINK it will look something like this:
#
# monthlogs <- c("02", "03")
# Loggernames <- c("D6", "L4", "E5")
#
# set blank df for each loggername
#
# foorloop Loggernames()
# forloopmonth logs(read in dataset with monthlog and loggername in it, rename column headers and clean *as below*, then stack all datasets of one logger on top of eachother and save that as a df)
# Read in logger info
D6_HOBO <- read.csv("HOBO/HOBO02.2024_21370988_3_D6.csv")
L4_HOBO <- read.csv("HOBO/HOBO02.2024_21370989_2_L4.csv")
E5_HOBO <- read.csv("HOBO/HOBO02.2024_21513093_1_E5.csv")
colnames(D6_HOBO) <- c("unique", "date", "temp", "light")
#D6_HOBO$date <- as.Date(D6_HOBO$date, format = "%m/%d/%Y HH:MM:SS")
colnames(L4_HOBO) <- c("unique", "date", "temp", "light")
#L4_HOBO$date <- as.Date(L4_HOBO$date, format = "%m/%d/%Y HH:MM:SS")
colnames(E5_HOBO) <- c("unique", "date", "temp", "light")
#E5_HOBO$date <- as.Date(L4_HOBO$date, format = "%m/%d/%Y HH:MM:SS")
ggplot() +
geom_point(data=D6_HOBO,aes(x=date,
y=temp), size = 1, alpha = 1/10, color = "red") +
geom_point(data=L4_HOBO,aes(x=date,
y=temp), size = 1, alpha = 1/10, color = "green") +
geom_point(data=E5_HOBO,aes(x=date,
y=temp), size = 1, alpha = 1/10, color = "blue")
ggplot() +
geom_point(data=D6_HOBO,aes(x=date,
y=light), size = 1, alpha = 1/10, color = "red") +
geom_point(data=L4_HOBO,aes(x=date,
y=light), size = 1, alpha = 1/10, color = "green") +
geom_point(data=E5_HOBO,aes(x=date,
y=light), size = 1, alpha = 1/10, color = "blue")
D6_avg <- tidyr::separate(D6_HOBO, 'date',
into = c('longdate', 'time'),
sep= ' ') %>%
tidyr::separate('longdate',
into = c('month', 'day', 'year'),
sep= '/',
remove = FALSE) %>%
select(-matches('^$')) %>%
group_by(year, month, day, longdate) %>%
summarise(meantemp = mean(temp),
meanlight = mean(light))
D6_avg$month <- factor(D6_avg$month, levels=c("02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "01"))
L4_avg <- tidyr::separate(L4_HOBO, 'date',
into = c('longdate', 'time'),
sep= ' ') %>%
tidyr::separate('longdate',
into = c('month', 'day', 'year'),
sep= '/',
remove = FALSE) %>%
select(-matches('^$')) %>%
group_by(year, month, day, longdate) %>%
summarise(meantemp = mean(temp),
meanlight = mean(light))
L4_avg$month <- factor(L4_avg$month, levels=c("02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "01"))
E5_avg <- tidyr::separate(E5_HOBO, 'date',
into = c('longdate', 'time'),
sep= ' ') %>%
tidyr::separate('longdate',
into = c('month', 'day', 'year'),
sep= '/',
remove = FALSE) %>%
select(-matches('^$')) %>%
group_by(year, month, day, longdate) %>%
summarise(meantemp = mean(temp),
meanlight = mean(light))
E5_avg$month <- factor(E5_avg$month, levels=c("2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "1"))
ggplot() +
geom_smooth(data = D6_avg, aes(x=as.Date(longdate, format= "%m / %d / %Y"), y=meantemp), colour="red") +
geom_smooth(data = L4_avg, aes(x=as.Date(longdate, format= "%m / %d / %Y"), y=meantemp), colour="green") +
geom_smooth(data = E5_avg, aes(x=as.Date(longdate, format= "%m / %d / %Y"), y=meantemp), colour="blue") +
theme_bw()+
labs(title= "Daily temperature means", y="Daily mean temperature (°C) with 95% CI", x="Date")
ggplot() +
geom_smooth(data = D6_avg, aes(x=as.Date(longdate, format= "%m / %d / %Y"), y=meanlight), colour="red") +
geom_smooth(data = L4_avg, aes(x=as.Date(longdate, format= "%m / %d / %Y"), y=meanlight), colour="green") +
geom_smooth(data = E5_avg, aes(x=as.Date(longdate, format= "%m / %d / %Y"), y=meanlight), colour="blue") +
theme_bw()+
labs(title= "Daily temperature means", y="Daily mean light (°C) with 95% CI", x="Date")
#Perhitungan dasar dapat diselesaikan
2 + 3
#Pembagian
94729 / 7
# Pembagian utuh- desimal tidak dipakai
94729 %/% 7
# Aritmatika modular - keluaran adaleh sisanya
94729 %% 7
print("Hello, world")
#Huruf besar atau huruf kecil
nama_1 <- "Sophie"
NAMA1
# Bisa membuat variabel dari nomor dan membuat kalkulasi
x <- 4
y <- 17
x*y
# Membuat variabel dari hasil kalkulasi
z <- x * y
z
#Bersatu Rangkaian
Negara <- "Amerika"
Umur <- 27
paste("Halo, nama saya", nama1, "Saya dari", Negara, "Umur saya", Umur, "tahun") # Harus pakai koma di antara kata dan variabel
# Angka - tidak pakai tanda kutip
k <- "17"
x * k
# Cek jenis data dengan "class"
class(k)
# Mengubah jenis data
k <- as.numeric(k)
class(k)
x * k #Berjalan
# BOLEAN: TRUE OR FALSE (Betul atau Salah). Di worksheet
x < k
x == k #harus pakai dua tkamu sama dengan
#Menghitung
nchar(nama1)
# Cek kalau ada kata di dalam rangkaian
grepl("Soph", nama1)
grepl("Anne", nama1)
buah <- c("apel", "pisang", "sangka", "salak", "mangga")
Daftar_1 <- c(4, 546, 234, 85, 1, 8, 3543, 654, 14, 46, 8934)
OneToTen <- 1:10 # Membuat daftar kalipatan dengan tanda titik dua
evenNumbers <- seq(0, 20, 2) #kalau tidak mau setiap angka, bisa membuat urutan dengan "seq"
#Even number = angka genap
#Odd NUMBER = angka ganjil
tenOnes <- rep(1, 10) #Membuat dafter dengan angka yang sama berkali-kali
# Dafter Isi
min(Daftar_1) #Minimum
max(Daftar_1) #Maksimum
sort(Daftar_1) #Mengatur
length(Daftar_1) #Jumlah
range(Daftar_1) #Minimum dan Maksimum
#Memanggil sebagian data dari daftar
buah[1]
buah[1:3]
buah[c(1,3, 5)]
buah[-2]
#Mengubah bagian daftar
buah[1] <- "jeruk"
buah
#operator boolean - cek daftar
"apel" %in% buah
#Menambah input baru pada daftar
buah_2 <- append(buah, "apel", after = 2)
buah_2
matriksAngka <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
# Cetak matriks
matriksAngka
# Bisa dibuat dengan rangkaian
matriksBuah <- matrix(c("apel", "pisang", "semangka", "mangga","anggur", "nanas", "salak", "alpukat", "jeruk"), nrow = 3, ncol = 3)
matriksBuah
# Daftar Isi
matriksBuah[1, 2]
matriksBuah[2,]
matriksBuah[,2]
# > 1 Kolom
matriksBuah[c(1,2),]
matriksBuah[,c(1,2)]
# Menambah Kolom
matriksBuahBaru_1 <- cbind(matriksBuah, c("stroberi", "bluberi", "durian"))
# Cetak matriks baru
matriksBuahBaru_1
#Menambah Baris
matriksBuahBaru_2 <- rbind(matriksBuah, c("stroberi", "bluberi", "durian"))
# Cetak matriks baru
matriksBuahBaru_2
# Menghapus baris dan kolom
matriksBuah <- matriksBuah[-c(1), -c(1)]
matriksBuah
# Cek matriks
"apel" %in% matriksBuah
"grape" %in% matriksBuah
# Cek dimensi dan ukuran
dim(matriksBuah)
length(matriksBuah)
# Membuat dataframe
Data_Frame <- data.frame (
Murid = c("Rina", "Virginia", "Ben"),
Nilai = c(100, 150, 120),
Waktu = c(60, 30, 45)
)
# Cetak Data frame
View(Data_Frame)
summary(Data_Frame)
Data_Frame[["Murid"]]
Data_Frame$Murid
# Menambah baris
baris_baru_DF <- rbind(Data_Frame, c("John", 110, 110))
# Cetak data frame baru
View(baris_baru_DF)
# Menambah kolom
kolom_baru_DF <- cbind(Data_Frame, Place = c(2, 1, 3))
# Hapus baris dan kolom yang pertama
Data_Frame_Remove <- Data_Frame[-c(1), -c(1)]
# Dimensi
dim(Data_Frame)
ncol(Data_Frame)
nrow(Data_Frame)
length(Data_Frame) #sama ncol
#if statement
a <- 33
b <- 200
if (b > a) { #Kalimat boolean. Kalau benar, R akan menjalankan kode di dalam kurung keriting
print("b lebih besar daripada a")
}
a <- 33
b <- 33
if (b > a) {
print("b lebih besar daripada a")
} else if (a == b) {
print ("a sama dengan b")
}
a <- 200
b <- 33
if (b > a) {
print("b lebih besar daripada a")
} else if (a == b) {
print ("a sama dengan b")
} else {
print("a lebih besar daripada b")
}
a <- 200
b <- 33
if (a < 1000){
if(b < 1000) {
print("a dan b kurang dari 1000")
}
}
a <- 200
b <- 33
if (a < 100 & b < 100) {
print("a dan b kurang dari 100")
}
if (a < 100 | b < 100) {
print("a atau b kurang dari 100")
}
i <- 1 # memberi angka pada i
while (i <= 6) { # Boolean, cek kalimat (benar/salah)
print(i) # Menjalan kode
i <- i + 1 # Merubah i. Kode berulang
}
for (x in 1:10) {
print(paste("Nomornya ", x))
}
loopBuah <- list("apel", "pisang", "alpukat")
for (x in loopBuah) {
print(paste("Buahnya ", x))
}
fungsi_aku <- function() { # membuat fungsi dengan nama "fungsi_aku". Tidak dijalankan
print("Hello World!")
}
# menanggil fungsi
fungsi_aku()
fungsi_nama <- function(name){
print(paste("Hello, my name is", name))
}
fungsi_nama()
fungsi_nama("Sophie") #Bisa merubah input fungsi
# Berbagai input
intro_function <- function(nama, asal){
print(paste("Halo, nama saya", nama, "Saya berasal dari", asal))
}
intro_function("Sophie", "Washington")
# Fungsi yang pakai "return" - return lebih dipakai karena bisa menyimpan keluaran pada variabel
fungsi_perkalian <- function(x) {
return (5 * x)
}
print(fungsi_perkalian(3))
print(fungsi_perkalian(5))
print(fungsi_perkalian(9))
nilaiFinal <- fungsi_perkalian(9) * 100
nilaiFinal
my_list <- list(name = "John", age = 30, scores = c(85, 90, 78))
View(my_list)
View(data.frame(my_list))
practice <- list(3, c("five", "six"), matrix(1:6, nrow = 2))
View(practice)
View(data.frame(practice))
