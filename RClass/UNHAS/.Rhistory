if (x %% 2 == 0 ) {
} else if (x %% 2 == 1) {
} else if (x == 0) {
}
if (x %% 2 == 0 ) {
print("x habis dibagi 2")
} else if (x %% 2 == 1) {
print ("x tidak habis dibagi 2")
} else if (x == 0) {
print ("x sama dengan nol")
}
x <- 5
if (x %% 2 == 0 ) {
print("x habis dibagi 2")
} else if (x %% 2 == 1) {
print ("x tidak habis dibagi 2")
} else if (x == 0) {
print ("x sama dengan nol")
}
x <- 9
if (x > 0) {
print("x positif")
} else if (x < 0) {
print ("x negatif")
} else if (x == 0) {
print ("x sama dengan nol")
}
if (x %% 2 == 0 ) {
print("x habis dibagi 2")
} else if (x %% 2 == 1) {
print ("x tidak habis dibagi 2")
} else if (x == 0) {
print ("x sama dengan nol")
}
x <- 12
if (x > 0) {
print("x positif")
} else if (x < 0) {
print ("x negatif")
} else if (x == 0) {
print ("x sama dengan nol")
}
if (x %% 5 == 0 ) {
print("x habis dibagi 2")
} else if (x %% 5 == 1) {
print ("x tidak habis dibagi 2")
}
x <- 12
if (x > 0) {
print("x positif")
} else if (x < 0) {
print ("x negatif")
} else if (x == 0) {
print ("x sama dengan nol")
}
if (x %% 5 == 0 ) {
print("x habis dibagi 2")
} else if (x %% 5 == > 0) {
if (x %% 2 == 0 ) {
print("x habis dibagi 2")
} else if (x %% 2 == 1) {
print ("x tidak habis dibagi 2")
}
if (x %% 2 == 0 ) {
print("x habis dibagi 2")
} else if (x %% 3 == 0) {
print ("x habis dibagi 3")
}
UciData <- read.csv("Desktop/UciData.csv")
UciData <- read.csv("Desktop\UciData.csv")
UciData <- read.csv("C:/Users/Sophi/Desktop/UciData.csv")
View(UciData)
plot(UciData$Kelimpahan_Makrozoobentos ~ Kerapatan_Mangrove)
plot(UciData$Kelimpahan_Makrozoobentos ~ UciData$Kerapatan_Mangrove)
?plot
regression <- lm(Kelimpahan_Makrozoobentos ~ Kerapatan_Mangrove, data = UciData)
UciData <- read.csv("C:/Users/Sophi/Desktop/UciData.csv")
regression <- lm(Kelimpahan_Makrozoobentos ~ Kerapatan_Mangrove, data = UciData)
summary(regression)
#create scatterplot
plot(Kelimpahan_Makrozoobentos ~ Kerapatan_Mangrove, data = UciData)
#add fitted regression line to scatterplot
abline(fit)
#add fitted regression line to scatterplot
abline(fit)
library(ggplot2)
ggplot(UciData, aes(x = Kerapatan_Mangrove, y = Kelimpahan_Makrozoobentos)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(UciData, aes(x = Kerapatan_Mangrove, y = Kelimpahan_Makrozoobentos)) +
geom_point() +
stat_smooth(method = "lm")+
stat_regline_equation(label.x.npc = "center")
ggplot(UciData, aes(x = Kerapatan_Mangrove, y = Kelimpahan_Makrozoobentos)) +
geom_point() +
stat_smooth(method = "lm")+
stat_regline_equation(label.x.npc = "center")
summary
ggplot(UciData, aes(x = Kerapatan_Mangrove, y = Kelimpahan_Makrozoobentos)) +
geom_point() +
stat_smooth(method = "lm")+
stat_regline_equation(label.x.npc = "center")
library(ggpubr)
ggplot(UciData, aes(x = Kerapatan_Mangrove, y = Kelimpahan_Makrozoobentos)) +
geom_point() +
stat_smooth(method = "lm")+
stat_regline_equation(label.x.npc = "center")
install.packages("LearnBayes")
library(LearnBayes)
library(dplyr)
Outlier <- UciData %>%
filter(Kerapatan_Mangrove < 300)
ggplot(Outlier, aes(x = Kerapatan_Mangrove, y = Kelimpahan_Makrozoobentos)) +
geom_point() +
stat_smooth(method = "lm")+
stat_regline_equation(label.x.npc = "center")
OutlierRegression <- lm(Kelimpahan_Makrozoobentos ~ Kerapatan_Mangrove, data = Outlier)
summary(OutlierRegression)
summary(regression)
ggplot(UciData, aes(x = Kerapatan_Mangrove, y = Kelimpahan_Makrozoobentos)) +
geom_point() +
stat_smooth(method = "lm")+
stat_regline_equation(label.x.npc = "center")
dat <- read.csv("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-September-Bioinformatics-Prerequisites/master/friday/lm_example_data.csv") #You can also read csv data directly off of the internet
linearModel <- lm(expression ~ temperature, data = dat) #What is the difference between these two codes
plot(x = dat$temperature, y = dat$expression)
abline(lm(expression ~ temperature, data = dat))
plot(linearModel)
plot(x = dat$temperature, y = dat$expression)
abline(lm(expression ~ temperature, data = dat))
today()
library(lubridate)
today()
new()
now()
myDate <- as.Date("2015-10-19 10:15")
str(myDate)
timeDate <- as.POSIXct("2015-10-19 10:15")
str(timeDate)
timeDatelt<- as.POSIXlt("2015-10-19 10:15")
str(timeDatelt)
df <- data.frame(date = as.Date("2021-01-01") - 0:99,
sales = runif(100, 10, 500) + seq(50, 149)^2)
getwd()
write.csv(df, "C:/Users/Sophi/Documents/GitHub/TanakekeProject/RClass/UNHAS/dateTime.csv")
dateData <- read.csv("C:/Users/Sophi/Documents/GitHub/TanakekeProject/RClass/UNHAS/dateTime.csv")
View(dateData)
# Donload the dates dataset. Each group picks a different column to fix the dates and graph a time series
dateData <- read.csv("C:/Users/Sophi/Documents/GitHub/TanakekeProject/RClass/UNHAS/dateTime.csv")
View(dateData)
dataData$date <- as.POSIXct(dataData$date3, format = "%A, %B %d, %Y")
# Donload the dates dataset. Each group picks a different column to fix the dates and graph a time series
dateData <- read.csv("C:/Users/Sophi/Documents/GitHub/TanakekeProject/RClass/UNHAS/dateTime.csv")
dateData$date <- as.POSIXct(dateData$date3, format = "%A, %B %d, %Y")
plot(x = date, y = sales, type = 'l')
plot(x = dateData$date, y = dateData$sales, type = 'l')
# Donload the dates dataset. Each group picks a different column to fix the dates and graph a time series
dateData <- read.csv("C:/Users/Sophi/Documents/GitHub/TanakekeProject/RClass/UNHAS/dateTime.csv")
plot(x = dateData$date3, y = dateData$sales, type = 'l')
# Try a time series alone
plot(x = dateData$date3, y = dateData$sales, type = 'l')
class(dateData$date3)
dateData$date <- as.POSIXct(dateData$date3, format = "%A, %B %d, %Y")
class(dateData$date)
dateInfo <- as.POSIXct("January 30, 2025")
dateInfo <- as.POSIXct("January 30, 25") #Doesn't work
dateInfo <- as.POSIXct("January 30, 25", format = "%B %d, %y")
str(dateInfo)
library(dplyr)
monthlyAverage <- dateData %>%
mutate(month = month(date)) %>%
group_by(month) %>%
summarize(mean = mean(sales))
monthlyAverage
barplot(x = monthlyAverage$month, y = monthlyAverage$mean)
?barplot
barplot(monthlyAverage$mean, y = monthlyAverage$mean)
barplot(monthlyAverage$mean)
barplot(height = monthlyAverage$mean, names.arg = month)
barplot(height = monthlyAverage$mean, names.arg = monthlyAverage$month)
year(dateInfo)
month(dateInfo)
day(dateInfo)
library(lubridate)
library(dplyr)
today()
now()
myDate <- as.Date("2015-10-19 10:15")
str(myDate)
timeDate <- as.POSIXct("2015-10-19 10:15")
str(timeDate)
timeDatelt<- as.POSIXlt("2015-10-19 10:15")
str(timeDatelt)
dateInfo <- as.POSIXct("January 30, 25") #Doesn't work
dateInfo <- as.POSIXct("January 30, 25", format = "%B %d, %y")
str(dateInfo)
dateInfo <- as.POSIXct("January 30, 25 10:15 PM", format = "%B %d, %y %I:M %p")
str(dateInfo)
dateInfo <- as.POSIXct("January 30, 25 10:15", format = "%B %d, %y %I:M")
str(dateInfo)
dateInfo <- as.POSIXct("January 30, 25 10:15", format = "%B %d, %y %I:%M")
str(dateInfo)
dateInfo <- as.POSIXct("January 30, 25 10:15", format = "%B %d, %y %I:%M %p")
str(dateInfo)
dateInfo <- as.POSIXct("January 30, 25 10:15", format = "%B %d, %y %I:%M %P")
str(dateInfo)
dateInfo <- as.POSIXct("January 30, 25 10:15", format = "%B %d, %y %I:%M %p")
str(dateInfo)
dateInfo <- as.POSIXct("January 30, 25 10:15 PM", format = "%B %d, %y %I:%M %p")
str(dateInfo)
#Exracting information from
year(dateInfo)
month(dateInfo)
day(dateInfo)
hour(dateInfo)
minute(dateInfo)
install.packages("dplyr")
#Upload packages
library(dplyr)
#Setting a working directory
getwd()
setwd("C:/Users/Sophi/Documents/GitHub/TanakekeProject/RClass/UNHAS")
getwd()
#Upload our gapminder data
gapminder_data <- read.csv("gapminder.csv")
View(gapminder_data)
summary(gapminder_data)
#BaseR boxplot
boxplot(lifeExp ~country, data = gapminder_data)
#BaseR boxplot
boxplot(lifeExp ~country, data = gapminder_data)
SEAsia <- gapminder_data %>%
filter(country %in% c("Indonesia", "Malaysia", "Singapore")) #Filter out rows depending on informtion
View(SEAsiaa)
View(SEAsia)
boxplot(lifeExp ~country, data = SEAsia)
Indonesia_Data <- gapminder_data %>%
filter(country = "Indonesia")
Indonesia_Data <- gapminder_data %>%
filter(country == "Indonesia")
View(Indonesia_Data)
plot(x = Indonesia_Data$year, y = Indonesia_Data$lifeExp, type = 'l')
plot(x = Indonesia_Data$year, y = Indonesia_Data$lifeExp)
plot(x = Indonesia_Data$year, y = Indonesia_Data$lifeExp, type = 'l')
?plot
plot(x = Indonesia_Data$year, y = Indonesia_Data$lifeExp, type = 'b')
#BaseR boxplot
boxplot(lifeExp ~country, data = gapminder_data)
SEAsia <- gapminder_data %>%
filter(country %in% c("Indonesia", "Malaysia", "Singapore")) #Filter out rows depending on information
SEAsia <- gapminder_data %>%
filter(country %in% c("Indonesia", "Malaysia", "Singapore")) #Filter out rows depending on information
View(SEAsia)
boxplot(lifeExp ~ country, data = SEAsia)
plot(x = Indonesia_Data$year, y = Indonesia_Data$lifeExp, type = 'l')
plot(x = gapminder_data$gdpPerCap, y = gapminder_data$lifeExp)
plot(x = gapminder_data$gdpPerCap, y = gapminder_data$lifeExp)
#Upload our gapminder data
gapminder_data <- read.csv("gapminder.csv")
plot(x = gapminder_data$gdpPerCap, y = gapminder_data$lifeExp)
plot(x = gapminder_data$gdpPercap, y = gapminder_data$lifeExp)
lifeExpectancyData <- gapminder_data %>%
group_by(country) %>%
summarize(AvgLife = mean(lifeExp), Avggdp = mean(gdpPercap))
View(lifeExpectancyData)
plot(x = lifeExpectancyData$Avggdp, y = lifeExpectancyData$AvgLife)
t(x = lifeExpec
View(lifeExpectancyData
source("~/GitHub/TanakekeProject/RClass/UNHAS/Day_2Notes.R", echo=TRUE)
gdpSEAsia <- SEAsia %>%
group_by(country) %>%
summarize(AvgLife = mean(lifeExp), Avggdp = mean(gdpPercap))
View(gdpSEAsia)
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country)
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE)
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE, ylim = 0:16000)
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE, ylim = (0:16000))
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE, ylim = c(0:16000))
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE, ylim = c(0,16000))
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE, xlim = c(0, 16000))
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE, xlim = c(0, 17000))
barplot(height = gdpSEAsia$Avggdp, names.arg = gdpSEAsia$country, horiz = TRUE, xlim = c(0, 20000))
gdpSEAsia_IDR <- gdpSEAsia %>%
mutate(gdpIDR = Avggdp * 15491)
View(gdpSEAsia_IDR)
barplot(height = gdpSEAsia_IDR$Avggdp, names.arg = gdpSEAsia_IDR$country)
barplot(height = gdpSEAsia_IDR$gdpIDR, names.arg = gdpSEAsia_IDR$country)
gdpSEAsia_IDR <- gdpSEAsia %>%
mutate(gdpIDR = Avggdp * 15.491)
View(gdpSEAsia_IDR)
barplot(height = gdpSEAsia_IDR$gdpIDR, names.arg = gdpSEAsia_IDR$country)
populasDunia <- gapminder %>%
select(county, year, pop) %>%
rename(negara = country,
tahun = year,
populasi = pop)
populasDunia <- gapminder_data %>%
select(county, year, pop) %>%
rename(negara = country,
tahun = year,
populasi = pop)
populasDunia <- gapminder_data %>%
select(country, year, pop) %>%
rename(negara = country,
tahun = year,
populasi = pop)
View(populasDunia)
View(populasDunia)
populasiDunia <- gapminder_data %>%
select(country, year, pop) %>%
rename(negara = country,
tahun = year,
populasi = pop)
write.csv(populasiDunia, "dataPopulasi.csv")
write.csv(populasiDunia, "data Populasi.csv")
### STATISTICS IN R
dat <- read.csv("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-September-Bioinformatics-Prerequisites/master/friday/lm_example_data.csv")
View(dat)
View(dat)
summary(dat)
hist(dat$expression)
hist(dat$expression, breaks = 20)
boxplot(expression ~ treatment, data = dat)
# ANOVA IN R
one.way_ANOVA <- lm(expression ~ treatment, data = dat)
View(one.way_ANOVA)
View(one.way_ANOVA)
View(one.way_ANOVA)
#Using a categorical variable (treatment) with a continuous (expression)
summary(one.way_ANOVA)
#Linear Models
linearModel <- lm(expression ~ temperature, dat = dat)
#Linear Models
linearModel <- lm(expression ~ temperature, data = dat)
View(linearModel)
# Looking at two continuous variables (expression vs temperature)
summary(linearModel)
plot(x= dat$temperature, y = dat$expression, data = dat)
plot(x= dat$temperature, y = dat$expression)
abline(lm(expression~temperature, data = dat))
plot(linearModel)
# Looking at two continuous variables (expression vs temperature)
summary(linearModel)
plot(x= dat$temperature, y = dat$expression)
abline(lm(expression~temperature, data = dat))
### STATISTICS IN R
dat <- read.csv("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-September-Bioinformatics-Prerequisites/master/friday/lm_example_data.csv")
# ANOVA IN R
one.way_ANOVA <- lm(expression ~ treatment, data = dat)
#Using a categorical variable (treatment) with a continuous (expression)
summary(one.way_ANOVA)
View(iris)
library(ggplot2)
View(dat)
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point()
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point() +
geom_smooth(method = 'lm')
#Changing axis limits
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point() +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(0,20)
#Changing axis limits
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point() +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20)
#Changing axis titles
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point() +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(y="Expression", x="Temperature")
#Changing axis titles
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point() +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
# Changing colors of points
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point(col="steelblue", size=3) +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
# Changing colors of points
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point(col="red", size=3) +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
# Changing colors of points based on treatmen
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point(aes(col=state), size=3) +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
# Changing colors of points based on treatmen
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point(aes(col=state), size=3) +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
# Changing colors of points based on treatmen
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point(aes(col=treatmen), size=3) +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
# Changing colors of points based on treatmen
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point(aes(col=treatment), size=3) +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
# Changing colors of points based on treatmen
ggplot(dat, aes(x=temperature, y=expression)) +
geom_point(aes(col=treatment)) +
geom_smooth(method = 'lm') +
ylim(0,15) +
xlim(5,20) +
labs(title = "Temperature Vs Gene Expression", y="Expression", x="Temperature")
library(RColorBrewer)
head(chi_map)
#Basic mapping in ggplot
chi_map <- read_sf("https://raw.githubusercontent.com/thisisdaryn/data/master/geo/chicago/Comm_Areas.geojson")
head(chi_map)
library(sf) #for mapping later
#Basic mapping in ggplot
chi_map <- read_sf("https://raw.githubusercontent.com/thisisdaryn/data/master/geo/chicago/Comm_Areas.geojson")
head(chi_map)
#Creating basemap
ggplot(data = chi_map) +
geom_sf()
# Filling with data
ggplot(data = chi_health_map, aes(fill = Unemployment)) +
geom_sf() +
ggtitle("Unemployment rates in Chicago Community Areas")
# Filling with data
ggplot(data = chi_health_map, aes(fill = Unemployment)) +
geom_sf() +
ggtitle("Unemployment rates in Chicago Community Areas")
install.packages("giscoR")
Indonesia <- gisco_get_countries(country = "Indonesia", resolution = 1)
# Get the world polygon and extract UK
library(giscoR)
Indonesia <- gisco_get_countries(country = "Indonesia", resolution = 1)
View(Indonesia)
Indonesia <- gisco_get_countries(country = "UK", resolution = 1)
View(Indonesia)
Indonesia <- gisco_get_countries(country = "Indonesia", resolution = 1)
data <- world.cities %>% filter(country.etc == "Indonesia")
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
library(maps)
data <- world.cities %>% filter(country.etc == "Indonesia")
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
library(maps)
data <- world.cities %>% filter(country.etc == "Indonesia")
View(world.cities)
data <- world.cities %>%
filter(country.etc == "Indonesia")
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
library(maps)
data <- world.cities %>%
filter(country.etc == "Indonesia")
library(dplyr)
data <- world.cities %>%
filter(country.etc == "Indonesia")
# Left chart
ggplot() +
geom_sf(data = Indonesia, fill = "grey", alpha = 0.3) +
geom_point(data = data, aes(x = long, y = lat)) +
theme_void() +
ylim(50, 59)
# Left chart
ggplot() +
geom_sf(data = Indonesia, fill = "grey", alpha = 0.3) +
geom_point(data = data, aes(x = long, y = lat)) +
theme_void()
data %>%
arrange(pop) %>%
mutate(name = factor(name, unique(name))) %>%
ggplot() +
geom_sf(data = Indonesia, fill = "grey", alpha = 0.3) +
geom_point(aes(x = long, y = lat, size = pop, color = pop), alpha = 0.9) +
scale_size_continuous(range = c(1, 12)) +
scale_color_viridis_c(trans = "log") +
theme_void() +
ylim(50, 59) +
theme(legend.position = "none")
data %>%
arrange(pop) %>%
mutate(name = factor(name, unique(name))) %>%
ggplot() +
geom_sf(data = Indonesia, fill = "grey", alpha = 0.3) +
geom_point(aes(x = long, y = lat, size = pop, color = pop), alpha = 0.9) +
scale_size_continuous(range = c(1, 12)) +
scale_color_viridis_c(trans = "log") +
theme_void() +
theme(legend.position = "none")
