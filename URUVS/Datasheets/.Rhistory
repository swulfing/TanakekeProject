if(colnames(URUV_data[i]) %in% c("TIME_DROPPED", "TIME_PICKEDUP", "TIME_TOTALFOOTAGE")){
#URUV_data[[i]] <- strptime(URUV_data[[i]], format = "%H:%M")
URUV_data[[i]] <- times(paste0(URUV_data[[i]], ":00"))
}
else if(colnames(URUV_data[i]) != "NOTES_TIME" & (colnames(URUV_data[i]) %in% c("TOTALTIME_RECORDING", "ANALYSISTIME_START", "ANALYSISTIME_END", "TOTALTIME_ANALYSIS") | grepl("_TIME", colnames(URUV_data[i])) | grepl("TIME_1ST", colnames(URUV_data[i])) | grepl("T1_", colnames(URUV_data[i])))){
URUV_data[[i]] <- times(URUV_data[[i]])
}
}
View(URUV_data)
min(URUV_data$TIME_DROPPED
)
summary(URUV_data$TIME_DROPPED)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
# Temporal Trends
# Shannonâ€™s diversity Index
# Principal Component Analysis
# Community Structures
library(plyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(ggpubr)
#Make a MasterDatasheet with all months data
# CHANGE EVERY MONTH
completedData <- c("02.2024", "03.2024", "04.2024", "05.2024", "06.2024")
masterData <- data.frame(read.csv("URUV/RecordingData_02.2024.csv"))
for(i in 2:length(completedData)){
addedData <- data.frame(read.csv(paste0("URUV/RecordingData_",completedData[i],".csv")))
#All NA maxN's changed to 0s
for(k in 1:ncol(addedData)){
if(grepl("MAXN", colnames(addedData[k]))){
addedData[k][is.na(addedData[k])] <- 0
}}
masterData <- rbind.fill(masterData, addedData)
}
masterData <- masterData %>%
filter( F1_TIME != "") %>%
filter(!is.na(F1_TIME))
#Need to chage NAs again
for(j in 1:ncol(masterData)){
if(grepl("MAXN", colnames(masterData[j]))){
masterData[j][is.na(masterData[j])] <- 0
}}
#View(masterData)
write.csv(masterData, "Master_RecordingData.csv")
URUV_data <- masterData
combineSpecies <- function(NAME1, NAME2, NEWNAME) {
# NAME1 <- "FISHF"
# NAME2 <- "GUPPYC"
# NEWNAME <- "FISHF"
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
# CALCULATE NEW MAXN
SPECIES_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(SPECIES_Compare) <- paste0("MAXN_", NEWNAME)
#APPEND TO DATASET AND REPLACE
NEW_URUV <- cbind(NEW_URUV, SPECIES_Compare)
URUV_data <<- NEW_URUV
}
#NOTE: IF YOU USE T1 YOU HAVE TO CONVERT ALL OF THE TIME COLUMNS INTO TIME FORMATS. FIX FUNCTION ABOVE AS WELL TO CREATE SMALLER T1 VALUES
library(chron)
URUV_data <- masterData
URUV_data$DATE <- as.Date(URUV_data$DATE, format = "%d/%m/%Y")
URUV_data <- URUV_data %>% #Take out unused videos
rowwise() %>%
mutate(WATER_DEPTH_AVERAGE = mean(c(WATER_DEPTH_BEFORE, WATER_DEPTH_AFTER), na.rm=TRUE)) #Take avg depth during recording
#Change all time columns to be read as times. ADD TO COMBINE SPECIES FUNCTION to get correct t1 in combined species - STILL NOT WORKING
for(i in 1:ncol(URUV_data)){
if(colnames(URUV_data[i]) %in% c("TIME_DROPPED", "TIME_PICKEDUP", "TIME_TOTALFOOTAGE")){
#URUV_data[[i]] <- strptime(URUV_data[[i]], format = "%H:%M")
URUV_data[[i]] <- times(paste0(URUV_data[[i]], ":00"))
}
else if(colnames(URUV_data[i]) != "NOTES_TIME" & (colnames(URUV_data[i]) %in% c("TOTALTIME_RECORDING", "ANALYSISTIME_START", "ANALYSISTIME_END", "TOTALTIME_ANALYSIS") | grepl("_TIME", colnames(URUV_data[i])) | grepl("TIME_1ST", colnames(URUV_data[i])) | grepl("T1_", colnames(URUV_data[i])))){
URUV_data[[i]] <- times(URUV_data[[i]])
}
}
NAME1 <- "FISHF"
NAME2 <- "GUPPYC"
NEWNAME <- "FISHF"
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
SPECIES_Compare
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_cols
SPECIES_Compare[MAXN_cols[1]]
View(SPECIES_Compare[MAXN_cols[1]])
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
SPECIES_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(SPECIES_Compare) <- paste0("MAXN_", NEWNAME)
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
SPECIES_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
SPECIES_Compare[TIME_1ST_cols[1]]
TIME_1ST_cols
SPECIES_Compare
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(SPECIES_Compare) <- paste0("MAXN_", NEWNAME)
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
colnames(SPECIES_Compare) <- paste0("TIME_1ST", NEWNAME)
TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(MAXN_Compare) <- paste0("MAXN_", NEWNAME)
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
colnames(TIME_1ST_Compare) <- paste0("TIME_1ST", NEWNAME)
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
SPECIES_Compare
TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
TIME_1ST_Compare <- min(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
TIME_1ST_Compare
TIME_1ST_Compare <- max(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]])
TIME_1ST_Compare
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]], na.rm = TRUE)
TIME_1ST_cols
# CALCULATE NEW T1_
T1__cols <- grep("T1_", names(SPECIES_Compare), value = TRUE)
T1_cols_Compare <- pmin(SPECIES_Compare[T1__cols[1]], SPECIES_Compare[T1__cols[2]])
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(MAXN_Compare) <- paste0("MAXN_", NEWNAME)
View(MAXN_Compare)
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
class(SPECIES_Compare[TIME_1ST_cols[1]])
class(SPECIES_Compare[MAXN_cols[1]])
SPECIES_Compare
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]], na.rm = TRUE)
vIEW()
View(MAXN_Compare)
?pmin
min(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]], na.rm = TRUE)
period_to_seconds(SPECIES_Compare[TIME_1ST_cols[1]])
class(SPECIES_Compare[TIME_1ST_cols[1]])
SPECIES_Compare
View(SPECIES)
View(SPECIES_Compare)
class(SPECIES_Compare$TIME_1STFISHF)
period_to_seconds(SPECIES_Compare$TIME_1STFISHF)
SPECIES_Compare[10,2]
hour(SPECIES_Compare[10,2])
library(chron)
hour(SPECIES_Compare[10,2])
as.POSIXct(SPECIES_Compare[10,2])
as.POSIXct(SPECIES_Compare[10,2], format = "%H:%M:%S")
?strptime
as.POSIXct(as.character(SPECIES_Compare[10,2], format = "%H:%M:%S"))
as.POSIXct(as.character(SPECIES_Compare[10,2], format = "%H:%M:%S"), na.rm = TRUE)
as.POSIXct(as.character(SPECIES_Compare[10,2]), format = "%H:%M:%S", na.rm = TRUE)
SPECIES_Compare[TIME_1ST_cols[1]]
SPECIES_Compare[10,2]
SPECIES_Compare[TIME_1ST_cols[1]]
as.character(SPECIES_Compare[10,2])
#NOTE: IF YOU USE T1 YOU HAVE TO CONVERT ALL OF THE TIME COLUMNS INTO TIME FORMATS. FIX FUNCTION ABOVE AS WELL TO CREATE SMALLER T1 VALUES
library(chron)
URUV_data <- masterData
URUV_data$DATE <- as.Date(URUV_data$DATE, format = "%d/%m/%Y")
URUV_data <- URUV_data %>% #Take out unused videos
rowwise() %>%
mutate(WATER_DEPTH_AVERAGE = mean(c(WATER_DEPTH_BEFORE, WATER_DEPTH_AFTER), na.rm=TRUE)) #Take avg depth during recording
#Change all time columns to be read as times. ADD TO COMBINE SPECIES FUNCTION to get correct t1 in combined species - STILL NOT WORKING
for(i in 1:ncol(URUV_data)){
if(colnames(URUV_data[i]) %in% c("TIME_DROPPED", "TIME_PICKEDUP", "TIME_TOTALFOOTAGE")){
#URUV_data[[i]] <- strptime(URUV_data[[i]], format = "%H:%M")
URUV_data[[i]] <- times(paste0(URUV_data[[i]], ":00"))
}
else if(colnames(URUV_data[i]) != "NOTES_TIME" & (colnames(URUV_data[i]) %in% c("TOTALTIME_RECORDING", "ANALYSISTIME_START", "ANALYSISTIME_END", "TOTALTIME_ANALYSIS") | grepl("_TIME", colnames(URUV_data[i])) | grepl("TIME_1ST", colnames(URUV_data[i])) | grepl("T1_", colnames(URUV_data[i])))){
URUV_data[[i]] <- times(URUV_data[[i]])
}
}
View(URUV_data)
# COMBINING SPECIES ORIGINALLY SEPARATED IN DATA
combineSpecies("FISHF", "GUPPYC", "FISHF")
combineSpecies("FISHM", "FISHG", "FISHM")
combineSpecies("FISHL", "FISHK", "FISHK")
hist(URUV_data$TOTALTIME_RECORDING)
URUV_data <- masterData
URUV_data$DATE <- as.Date(URUV_data$DATE, format = "%d/%m/%Y")
URUV_data <- URUV_data %>% #Take out unused videos
rowwise() %>%
mutate(WATER_DEPTH_AVERAGE = mean(c(WATER_DEPTH_BEFORE, WATER_DEPTH_AFTER), na.rm=TRUE)) #Take avg depth during recording
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(MAXN_Compare) <- paste0("MAXN_", NEWNAME)
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
View(SPECIES_Compare)
class(SPECIES_Compare$TIME_1STFISHF)
SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXct(SPECIES_Compare[TIME_1ST_cols[1]], format = "%H:%M:%S")
SPECIES_Compare[TIME_1ST_cols[1]] <- strptime(SPECIES_Compare[TIME_1ST_cols[1]], format = "%H:%M:%S")
SPECIES_Compare[TIME_1ST_cols[1]] <- strptime(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
SPECIES_CompareT$IME_1ST_cols[1] <- strptime(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
SPECIES_Compare$TIME_1ST_cols[1] <- strptime(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
View(SPECIES_Compare)
class(SPECIES_Compare$TIME_1ST_cols[1])
TIME_1ST_cols
class(SPECIES_Compare$TIME_1STFISHF)
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
SPECIES_Compare$TIME_1ST_cols[1] <- strptime(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
class(SPECIES_Compare$TIME_1STFISHF)
SPECIES_Compare$TIME_1ST_cols[1] <- as.Date(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
SPECIES_Compare$TIME_1ST_cols[1] <- as.POSIXlt(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
SPECIES_Compare$TIME_1ST_cols[1] <- as.POSIXlt(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
class(SPECIES_Compare$TIME_1ST_cols[1])
class(SPECIES_Compare$TIME_1STFISHF)
SPECIES_Compare$SPECIES_Compare$TIME_1STFISHF <- as.POSIXlt(SPECIES_Compare$SPECIES_Compare$TIME_1STFISHF, format = "%H:%M:%S")
SPECIES_Compare$TIME_1STFISHF <- as.POSIXlt(SPECIES_Compare$TIME_1STFISHF, format = "%H:%M:%S")
class(SPECIES_Compare$TIME_1STFISHF)
View(SPECIES_Compare)
as.POSIXlt(SPECIES_Compare[TIME_1ST_cols[1]], format = "%H:%M:%S")
as.POSIXlt(SPECIES_Compare$TIME_1ST_cols[1], format = "%H:%M:%S")
class(SPECIES_Compare$TIME_1ST_cols[1])
SPECIES_Compare$TIME_1ST_cols[1]
SPECIES_Compare$(TIME_1ST_cols[1])
SPECIES_Compare[TIME_1ST_cols[1]]
class(SPECIES_Compare[TIME_1ST_cols[1]])
SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXlt(as.list(SPECIES_Compare[TIME_1ST_cols[1]]), format = "%H:%M:%S")
as.list(SPECIES_Compare[TIME_1ST_cols[1]])
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW TIME_1ST
TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXlt(as.list(SPECIES_Compare[TIME_1ST_cols[1]]), format = "%H:%M:%S")
as.list(SPECIES_Compare[TIME_1ST_cols[1]])
as.POSIXlt(as.list(SPECIES_Compare[TIME_1ST_cols[1]]), format = "%H:%M:%S")
SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXlt(as.list(SPECIES_Compare[TIME_1ST_cols[1]]), format = "%H:%M:%S", na.rm = TRUE)
SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXlt(as.list(SPECIES_Compare[TIME_1ST_cols[1]]), format = "%H:%M:%S", na.rm = TRUE)
SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXct(as.list(SPECIES_Compare[TIME_1ST_cols[1]]), format = "%H:%M:%S", na.rm = TRUE)
as.POSIXct(SPECIES_Compare$TIME_1STFISHF, format = "%H:%M:%S", na.rm = TRUE)
class(SPECIES_Compare$TIME_1STFISHF)
SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXct(as.character(SPECIES_Compare[TIME_1ST_cols[1]]), format = "%H:%M:%S", na.rm = TRUE)
Voew(SPECIES_Compare)
VIew(SPECIES_Compare)
View(SPECIES_Compare)
TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]], na.rm = TRUE)
as.character(SPECIES_Compare[TIME_1ST_cols[1]])
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
# Temporal Trends
# Shannonâ€™s diversity Index
# Principal Component Analysis
# Community Structures
library(plyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(ggpubr)
#Make a MasterDatasheet with all months data
# CHANGE EVERY MONTH
completedData <- c("02.2024", "03.2024", "04.2024", "05.2024", "06.2024")
masterData <- data.frame(read.csv("URUV/RecordingData_02.2024.csv"))
for(i in 2:length(completedData)){
addedData <- data.frame(read.csv(paste0("URUV/RecordingData_",completedData[i],".csv")))
#All NA maxN's changed to 0s
for(k in 1:ncol(addedData)){
if(grepl("MAXN", colnames(addedData[k]))){
addedData[k][is.na(addedData[k])] <- 0
}}
masterData <- rbind.fill(masterData, addedData)
}
masterData <- masterData %>%
filter( F1_TIME != "") %>%
filter(!is.na(F1_TIME))
#Need to chage NAs again
for(j in 1:ncol(masterData)){
if(grepl("MAXN", colnames(masterData[j]))){
masterData[j][is.na(masterData[j])] <- 0
}}
#View(masterData)
write.csv(masterData, "Master_RecordingData.csv")
URUV_data <- masterData
combineSpecies <- function(NAME1, NAME2, NEWNAME) {
# NAME1 <- "FISHF"
# NAME2 <- "GUPPYC"
# NEWNAME <- "FISHF"
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(MAXN_Compare) <- paste0("MAXN_", NEWNAME)
#FIX THIS IT STILL DOESN'T WORK
# # CALCULATE NEW TIME_1ST
# TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
# SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXct(SPECIES_Compare[TIME_1ST_cols[1]], format = "%H:%M:%S", na.rm = TRUE)
# TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]], na.rm = TRUE)
# colnames(TIME_1ST_Compare) <- paste0("TIME_1ST", NEWNAME)
#
# # CALCULATE NEW T1_
# T1__cols <- grep("T1_", names(SPECIES_Compare), value = TRUE)
# T1_cols_Compare <- pmin(SPECIES_Compare[T1__cols[1]], SPECIES_Compare[T1__cols[2]], na.rm = TRUE)
# colnames(T1_cols_Compare) <- paste0("T1_", NEWNAME)
#APPEND TO DATASET AND REPLACE
NEW_URUV <- cbind(NEW_URUV, MAXN_Compare)
URUV_data <<- NEW_URUV
}
#NOTE: IF YOU USE T1 YOU HAVE TO CONVERT ALL OF THE TIME COLUMNS INTO TIME FORMATS. FIX FUNCTION ABOVE AS WELL TO CREATE SMALLER T1 VALUES
library(chron)
URUV_data <- masterData
URUV_data$DATE <- as.Date(URUV_data$DATE, format = "%d/%m/%Y")
URUV_data <- URUV_data %>% #Take out unused videos
rowwise() %>%
mutate(WATER_DEPTH_AVERAGE = mean(c(WATER_DEPTH_BEFORE, WATER_DEPTH_AFTER), na.rm=TRUE)) #Take avg depth during recording
# COMBINING SPECIES ORIGINALLY SEPARATED IN DATA - THIS NEEDS TO BE BEFORE CHANGING ALL COLUMNS TO READ AS TIMES!!!
combineSpecies("FISHF", "GUPPYC", "FISHF")
combineSpecies("FISHM", "FISHG", "FISHM")
combineSpecies("FISHL", "FISHK", "FISHK")
#Change all time columns to be read as times
for(i in 1:ncol(URUV_data)){
if(colnames(URUV_data[i]) %in% c("TIME_DROPPED", "TIME_PICKEDUP", "TIME_TOTALFOOTAGE")){
#URUV_data[[i]] <- strptime(URUV_data[[i]], format = "%H:%M")
URUV_data[[i]] <- times(paste0(URUV_data[[i]], ":00"))
}
else if(colnames(URUV_data[i]) != "NOTES_TIME" & (colnames(URUV_data[i]) %in% c("TOTALTIME_RECORDING", "ANALYSISTIME_START", "ANALYSISTIME_END", "TOTALTIME_ANALYSIS") | grepl("_TIME", colnames(URUV_data[i])) | grepl("TIME_1ST", colnames(URUV_data[i])) | grepl("T1_", colnames(URUV_data[i])))){
URUV_data[[i]] <- times(URUV_data[[i]])
}
}
View(URUV_data)
# # COMBINING SPECIES ORIGINALLY SEPARATED IN DATA
# combineSpecies("FISHF", "GUPPYC", "FISHF")
# combineSpecies("FISHM", "FISHG", "FISHM")
# combineSpecies("FISHL", "FISHK", "FISHK")
View(URUV_data)
hist(URUV_data$TOTALTIME_ANALYSIS)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0)
View(FISHF)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, MAXN_fISHF)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, MAXN_FISHF)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, MAXN_FISHF)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0) %>%
select(DATE, DESA, SITENAME_COMBINE)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0)
class(URUV_data)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, MAXN_FISHF)
length(URUV_data$DATE)
length(URUV_data$DESA)
length(URUV_data$SITENAME_COMBINE)
length(URUV_data$MAXN_FISHF)
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0) %>%
select(DATE)#, DESA, SITENAME_COMBINE, MAXN_FISHF)
?as.factor
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
# Temporal Trends
# Shannonâ€™s diversity Index
# Principal Component Analysis
# Community Structures
library(plyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(ggpubr)
#Make a MasterDatasheet with all months data
# CHANGE EVERY MONTH
completedData <- c("02.2024", "03.2024", "04.2024", "05.2024", "06.2024")
masterData <- data.frame(read.csv("URUV/RecordingData_02.2024.csv"))
for(i in 2:length(completedData)){
addedData <- data.frame(read.csv(paste0("URUV/RecordingData_",completedData[i],".csv")))
#All NA maxN's changed to 0s
for(k in 1:ncol(addedData)){
if(grepl("MAXN", colnames(addedData[k]))){
addedData[k][is.na(addedData[k])] <- 0
}}
masterData <- rbind.fill(masterData, addedData)
}
masterData <- masterData %>%
filter( F1_TIME != "") %>%
filter(!is.na(F1_TIME))
#Need to chage NAs again
for(j in 1:ncol(masterData)){
if(grepl("MAXN", colnames(masterData[j]))){
masterData[j][is.na(masterData[j])] <- 0
}}
#View(masterData)
write.csv(masterData, "Master_RecordingData.csv")
URUV_data <- masterData
combineSpecies <- function(NAME1, NAME2, NEWNAME) {
# NAME1 <- "FISHF"
# NAME2 <- "GUPPYC"
# NEWNAME <- "FISHF"
SPECIES_Compare <- URUV_data %>%
select(contains(NAME1) | contains(NAME2))
# Remove these columns from original dataset
NEW_URUV <- URUV_data[,!names(URUV_data) %in% colnames(SPECIES_Compare)]
# CALCULATE NEW MAXN
MAXN_cols <- grep("MAXN", names(SPECIES_Compare), value = TRUE)
MAXN_Compare <- pmax(SPECIES_Compare[MAXN_cols[1]], SPECIES_Compare[MAXN_cols[2]])
colnames(MAXN_Compare) <- paste0("MAXN_", NEWNAME)
#FIX THIS IT STILL DOESN'T WORK
# # CALCULATE NEW TIME_1ST
# TIME_1ST_cols <- grep("TIME_1ST", names(SPECIES_Compare), value = TRUE)
# SPECIES_Compare[TIME_1ST_cols[1]] <- as.POSIXct(SPECIES_Compare[TIME_1ST_cols[1]], format = "%H:%M:%S", na.rm = TRUE)
# TIME_1ST_Compare <- pmin(SPECIES_Compare[TIME_1ST_cols[1]], SPECIES_Compare[TIME_1ST_cols[2]], na.rm = TRUE)
# colnames(TIME_1ST_Compare) <- paste0("TIME_1ST", NEWNAME)
#
# # CALCULATE NEW T1_
# T1__cols <- grep("T1_", names(SPECIES_Compare), value = TRUE)
# T1_cols_Compare <- pmin(SPECIES_Compare[T1__cols[1]], SPECIES_Compare[T1__cols[2]], na.rm = TRUE)
# colnames(T1_cols_Compare) <- paste0("T1_", NEWNAME)
#APPEND TO DATASET AND REPLACE
NEW_URUV <- cbind(NEW_URUV, MAXN_Compare)
URUV_data <<- NEW_URUV
}
#NOTE: IF YOU USE T1 YOU HAVE TO CONVERT ALL OF THE TIME COLUMNS INTO TIME FORMATS. FIX FUNCTION ABOVE AS WELL TO CREATE SMALLER T1 VALUES
library(chron)
URUV_data <- masterData
URUV_data$DATE <- as.Date(URUV_data$DATE, format = "%d/%m/%Y")
URUV_data <- URUV_data %>% #Take out unused videos
rowwise() %>%
mutate(WATER_DEPTH_AVERAGE = mean(c(WATER_DEPTH_BEFORE, WATER_DEPTH_AFTER), na.rm=TRUE)) #Take avg depth during recording
# Making months factors
URUV_data$MONTH <- as.factor(URUV_data$MONTH, levels = c("JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"))
# Making months factors
URUV_data$MONTH <- factor(URUV_data$MONTH, levels = c("JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"))
#NOTE: IF YOU USE T1 YOU HAVE TO CONVERT ALL OF THE TIME COLUMNS INTO TIME FORMATS. FIX FUNCTION ABOVE AS WELL TO CREATE SMALLER T1 VALUES
library(chron)
URUV_data <- masterData
URUV_data$DATE <- as.Date(URUV_data$DATE, format = "%d/%m/%Y")
URUV_data <- URUV_data %>% #Take out unused videos
rowwise() %>%
mutate(WATER_DEPTH_AVERAGE = mean(c(WATER_DEPTH_BEFORE, WATER_DEPTH_AFTER), na.rm=TRUE)) #Take avg depth during recording
# Making months factors
URUV_data$MONTH <- factor(URUV_data$MONTH, levels = c("JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"))
# COMBINING SPECIES ORIGINALLY SEPARATED IN DATA - THIS NEEDS TO BE BEFORE CHANGING ALL COLUMNS TO READ AS TIMES!!!
combineSpecies("FISHF", "GUPPYC", "FISHF")
combineSpecies("FISHM", "FISHG", "FISHM")
combineSpecies("FISHL", "FISHK", "FISHK")
#Change all time columns to be read as times
for(i in 1:ncol(URUV_data)){
if(colnames(URUV_data[i]) %in% c("TIME_DROPPED", "TIME_PICKEDUP", "TIME_TOTALFOOTAGE")){
#URUV_data[[i]] <- strptime(URUV_data[[i]], format = "%H:%M")
URUV_data[[i]] <- times(paste0(URUV_data[[i]], ":00"))
}
else if(colnames(URUV_data[i]) != "NOTES_TIME" & (colnames(URUV_data[i]) %in% c("TOTALTIME_RECORDING", "ANALYSISTIME_START", "ANALYSISTIME_END", "TOTALTIME_ANALYSIS") | grepl("_TIME", colnames(URUV_data[i])) | grepl("TIME_1ST", colnames(URUV_data[i])) | grepl("T1_", colnames(URUV_data[i])))){
URUV_data[[i]] <- times(URUV_data[[i]])
}
}
# # COMBINING SPECIES ORIGINALLY SEPARATED IN DATA
# combineSpecies("FISHF", "GUPPYC", "FISHF")
# combineSpecies("FISHM", "FISHG", "FISHM")
# combineSpecies("FISHL", "FISHK", "FISHK")
FISHF <- URUV_data %>%
filter(MAXN_FISHF !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, MAXN_FISHF)
DOTDASH <- URUV_data %>%
filter(MAXN_DOTDASH !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, MAXN_DOTDASH)
View(URUV_data)
GUPPYBOTH <- URUV_data %>%
filter(MAXN_GUPPYBOTH !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, GUPPY_BOTH)
GUPPYBOTH <- URUV_data %>%
filter(MAXN_GUPPYBOTH !=0) %>%
select(DATE, DESA, SITENAME_COMBINE, MAXN_GUPPYBOTH)
View(GUPPYBOTH)
